function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
// unfortunately this can't be a constant as that wouldn't be tree-shakeable
// so we cache the result instead
let crossorigin;
function is_crossorigin() {
    if (crossorigin === undefined) {
        crossorigin = false;
        try {
            if (typeof window !== 'undefined' && window.parent) {
                void window.parent.document;
            }
        }
        catch (error) {
            crossorigin = true;
        }
    }
    return crossorigin;
}
function add_resize_listener(node, fn) {
    const computed_style = getComputedStyle(node);
    if (computed_style.position === 'static') {
        node.style.position = 'relative';
    }
    const iframe = element('iframe');
    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
    iframe.setAttribute('aria-hidden', 'true');
    iframe.tabIndex = -1;
    const crossorigin = is_crossorigin();
    let unsubscribe;
    if (crossorigin) {
        iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
        unsubscribe = listen(window, 'message', (event) => {
            if (event.source === iframe.contentWindow)
                fn();
        });
    }
    else {
        iframe.src = 'about:blank';
        iframe.onload = () => {
            unsubscribe = listen(iframe.contentWindow, 'resize', fn);
        };
    }
    append(node, iframe);
    return () => {
        if (crossorigin) {
            unsubscribe();
        }
        else if (unsubscribe && iframe.contentWindow) {
            unsubscribe();
        }
        detach(iframe);
    };
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function outro_and_destroy_block(block, lookup) {
    transition_out(block, 1, 1, () => {
        lookup.delete(block.key);
    });
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
    let o = old_blocks.length;
    let n = list.length;
    let i = o;
    const old_indexes = {};
    while (i--)
        old_indexes[old_blocks[i].key] = i;
    const new_blocks = [];
    const new_lookup = new Map();
    const deltas = new Map();
    i = n;
    while (i--) {
        const child_ctx = get_context(ctx, list, i);
        const key = get_key(child_ctx);
        let block = lookup.get(key);
        if (!block) {
            block = create_each_block(key, child_ctx);
            block.c();
        }
        else if (dynamic) {
            block.p(child_ctx, dirty);
        }
        new_lookup.set(key, new_blocks[i] = block);
        if (key in old_indexes)
            deltas.set(key, Math.abs(i - old_indexes[key]));
    }
    const will_move = new Set();
    const did_move = new Set();
    function insert(block) {
        transition_in(block, 1);
        block.m(node, next);
        lookup.set(block.key, block);
        next = block.first;
        n--;
    }
    while (o && n) {
        const new_block = new_blocks[n - 1];
        const old_block = old_blocks[o - 1];
        const new_key = new_block.key;
        const old_key = old_block.key;
        if (new_block === old_block) {
            // do nothing
            next = new_block.first;
            o--;
            n--;
        }
        else if (!new_lookup.has(old_key)) {
            // remove old block
            destroy(old_block, lookup);
            o--;
        }
        else if (!lookup.has(new_key) || will_move.has(new_key)) {
            insert(new_block);
        }
        else if (did_move.has(old_key)) {
            o--;
        }
        else if (deltas.get(new_key) > deltas.get(old_key)) {
            did_move.add(new_key);
            insert(new_block);
        }
        else {
            will_move.add(old_key);
            o--;
        }
    }
    while (o--) {
        const old_block = old_blocks[o];
        if (!new_lookup.has(old_block.key))
            destroy(old_block, lookup);
    }
    while (n)
        insert(new_blocks[n - 1]);
    return new_blocks;
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/* src/AutocompleteSelect.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-tl3vld-style";
	style.textContent = ".svelte-autocomplete-select{display:inline-block;position:relative;border:1px solid #bebebe;border-radius:0.25rem;padding:0.25rem 0.5rem;display:flex;align-items:center}.svelte-autocomplete-select-input{height:2.5rem;min-width:12rem;font-size:1rem;color:#212121;border:none;margin:0;padding:0}.svelte-autocomplete-results-container{display:none}.svelte-autocomplete-results-container.isExpanded{display:block}.svelte-autocomplete-select-overlay{position:fixed;top:0;left:0;z-index:1;width:100%;height:100%}.svelte-autocomplete-select-list{width:calc(100% - 2px);position:absolute;left:0;right:0;top:2rem;list-style-type:none;border:1px solid transparent;background-color:transparent;color:#212121;border-radius:0 0 .1rem .1rem;padding-left:0;margin:0;z-index:10;text-align:left}.svelte-autocomplete-select-list.has-options{border-color:#bebebe;background-color:#fff}.svelte-autocomplete-select-option{padding:0.5rem;user-select:none;cursor:pointer}.svelte-autocomplete-select-option span{font-weight:bold;color:#212121}.svelte-autocomplete-select-option[aria-selected=\"true\"],.svelte-autocomplete-select-option:hover{background-color:rgba(0,0, 0, .1)}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[29] = list[i];
	child_ctx[31] = i;
	return child_ctx;
}

const get_option_slot_changes = dirty => ({
	matches: dirty[0] & /*matches*/ 2048,
	match: dirty[0] & /*matches*/ 2048,
	index: dirty[0] & /*matches*/ 2048
});

const get_option_slot_context = ctx => ({
	matches: /*matches*/ ctx[11],
	match: /*match*/ ctx[29],
	index: /*index*/ ctx[31],
	handleSubmit: /*handleSubmit*/ ctx[16]
});

const get_icon_slot_changes = dirty => ({
	value: dirty[0] & /*value*/ 1,
	isExpanded: dirty[0] & /*isExpanded*/ 2
});

const get_icon_slot_context = ctx => ({
	value: /*value*/ ctx[0],
	isExpanded: /*isExpanded*/ ctx[1]
});

// (190:104)              
function fallback_block(ctx) {
	let li;
	let t0_value = /*getValue*/ ctx[3](/*match*/ ctx[29]) + "";
	let t0;
	let li_class_value;
	let li_aria_selected_value;
	let t1;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[26](/*match*/ ctx[29]);
	}

	return {
		c() {
			li = element("li");
			t0 = text(t0_value);
			t1 = space();
			attr(li, "class", li_class_value = "svelte-autocomplete-select-option " + (/*classes*/ ctx[4].option ?? ""));
			attr(li, "aria-selected", li_aria_selected_value = /*index*/ ctx[31] === /*highlightIndex*/ ctx[9]);
			attr(li, "role", "option");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t0);
			insert(target, t1, anchor);

			if (!mounted) {
				dispose = listen(li, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*getValue, matches*/ 2056 && t0_value !== (t0_value = /*getValue*/ ctx[3](/*match*/ ctx[29]) + "")) set_data(t0, t0_value);

			if (dirty[0] & /*classes*/ 16 && li_class_value !== (li_class_value = "svelte-autocomplete-select-option " + (/*classes*/ ctx[4].option ?? ""))) {
				attr(li, "class", li_class_value);
			}

			if (dirty[0] & /*matches, highlightIndex*/ 2560 && li_aria_selected_value !== (li_aria_selected_value = /*index*/ ctx[31] === /*highlightIndex*/ ctx[9])) {
				attr(li, "aria-selected", li_aria_selected_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
			if (detaching) detach(t1);
			mounted = false;
			dispose();
		}
	};
}

// (189:8) {#each matches as match, index (match)}
function create_each_block(key_1, ctx) {
	let first;
	let current;
	const option_slot_template = /*#slots*/ ctx[23].option;
	const option_slot = create_slot(option_slot_template, ctx, /*$$scope*/ ctx[22], get_option_slot_context);
	const option_slot_or_fallback = option_slot || fallback_block(ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if (option_slot_or_fallback) option_slot_or_fallback.c();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);

			if (option_slot_or_fallback) {
				option_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (option_slot) {
				if (option_slot.p && dirty[0] & /*$$scope, matches*/ 4196352) {
					update_slot(option_slot, option_slot_template, ctx, /*$$scope*/ ctx[22], dirty, get_option_slot_changes, get_option_slot_context);
				}
			} else {
				if (option_slot_or_fallback && option_slot_or_fallback.p && dirty[0] & /*classes, matches, highlightIndex, getValue*/ 2584) {
					option_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(option_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(option_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if (option_slot_or_fallback) option_slot_or_fallback.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let input;
	let input_class_value;
	let t0;
	let t1;
	let div1;
	let div0;
	let div0_class_value;
	let t2;
	let ul;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let ul_class_value;
	let div1_class_value;
	let div2_class_value;
	let div2_resize_listener;
	let current;
	let mounted;
	let dispose;
	const icon_slot_template = /*#slots*/ ctx[23].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[22], get_icon_slot_context);
	let each_value = /*matches*/ ctx[11];
	const get_key = ctx => /*match*/ ctx[29];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			div2 = element("div");
			input = element("input");
			t0 = space();
			if (icon_slot) icon_slot.c();
			t1 = space();
			div1 = element("div");
			div0 = element("div");
			t2 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(input, "id", /*inputId*/ ctx[6]);
			attr(input, "type", "text");
			attr(input, "class", input_class_value = "svelte-autocomplete-select-input " + (/*classes*/ ctx[4].input ?? ""));
			attr(input, "aria-autocomplete", "list");
			attr(input, "aria-controls", /*listId*/ ctx[5]);
			attr(input, "autocapitalize", "none");
			attr(input, "autocomplete", "off");
			attr(input, "placeholder", /*placeholder*/ ctx[7]);
			attr(input, "name", /*name*/ ctx[2]);
			attr(div0, "class", div0_class_value = "svelte-autocomplete-select-overlay " + (/*classes*/ ctx[4].overlay ?? ""));
			attr(ul, "id", /*listId*/ ctx[5]);
			attr(ul, "class", ul_class_value = "svelte-autocomplete-select-list " + (/*classes*/ ctx[4].list ?? "") + " " + (/*matches*/ ctx[11]?.length > 0 ? "has-options" : ""));
			set_style(ul, "top", /*containerHeight*/ ctx[10] + "px");
			attr(ul, "role", "listbox");
			attr(div1, "class", div1_class_value = "svelte-autocomplete-results-container " + (/*classes*/ ctx[4].results ?? ""));
			attr(div1, "role", "combobox");
			attr(div1, "aria-expanded", /*isExpanded*/ ctx[1]);
			attr(div1, "aria-owns", /*listId*/ ctx[5]);
			toggle_class(div1, "isExpanded", /*isExpanded*/ ctx[1]);
			attr(div2, "class", div2_class_value = "svelte-autocomplete-select " + (/*classes*/ ctx[4].container ?? ""));
			add_render_callback(() => /*div2_elementresize_handler*/ ctx[27].call(div2));
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, input);
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding*/ ctx[25](input);
			append(div2, t0);

			if (icon_slot) {
				icon_slot.m(div2, null);
			}

			append(div2, t1);
			append(div2, div1);
			append(div1, div0);
			append(div1, t2);
			append(div1, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			div2_resize_listener = add_resize_listener(div2, /*div2_elementresize_handler*/ ctx[27].bind(div2));
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[24]),
					listen(input, "keydown", /*handleKeyDown*/ ctx[15]),
					listen(input, "input", /*handleInput*/ ctx[14]),
					listen(input, "click", /*handleExpandResults*/ ctx[12]),
					listen(div0, "click", /*hideResults*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*inputId*/ 64) {
				attr(input, "id", /*inputId*/ ctx[6]);
			}

			if (!current || dirty[0] & /*classes*/ 16 && input_class_value !== (input_class_value = "svelte-autocomplete-select-input " + (/*classes*/ ctx[4].input ?? ""))) {
				attr(input, "class", input_class_value);
			}

			if (!current || dirty[0] & /*listId*/ 32) {
				attr(input, "aria-controls", /*listId*/ ctx[5]);
			}

			if (!current || dirty[0] & /*placeholder*/ 128) {
				attr(input, "placeholder", /*placeholder*/ ctx[7]);
			}

			if (!current || dirty[0] & /*name*/ 4) {
				attr(input, "name", /*name*/ ctx[2]);
			}

			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			if (icon_slot) {
				if (icon_slot.p && dirty[0] & /*$$scope, value, isExpanded*/ 4194307) {
					update_slot(icon_slot, icon_slot_template, ctx, /*$$scope*/ ctx[22], dirty, get_icon_slot_changes, get_icon_slot_context);
				}
			}

			if (!current || dirty[0] & /*classes*/ 16 && div0_class_value !== (div0_class_value = "svelte-autocomplete-select-overlay " + (/*classes*/ ctx[4].overlay ?? ""))) {
				attr(div0, "class", div0_class_value);
			}

			if (dirty[0] & /*classes, matches, highlightIndex, handleSubmit, getValue, $$scope*/ 4262424) {
				each_value = /*matches*/ ctx[11];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}

			if (!current || dirty[0] & /*listId*/ 32) {
				attr(ul, "id", /*listId*/ ctx[5]);
			}

			if (!current || dirty[0] & /*classes, matches*/ 2064 && ul_class_value !== (ul_class_value = "svelte-autocomplete-select-list " + (/*classes*/ ctx[4].list ?? "") + " " + (/*matches*/ ctx[11]?.length > 0 ? "has-options" : ""))) {
				attr(ul, "class", ul_class_value);
			}

			if (!current || dirty[0] & /*containerHeight*/ 1024) {
				set_style(ul, "top", /*containerHeight*/ ctx[10] + "px");
			}

			if (!current || dirty[0] & /*classes*/ 16 && div1_class_value !== (div1_class_value = "svelte-autocomplete-results-container " + (/*classes*/ ctx[4].results ?? ""))) {
				attr(div1, "class", div1_class_value);
			}

			if (!current || dirty[0] & /*isExpanded*/ 2) {
				attr(div1, "aria-expanded", /*isExpanded*/ ctx[1]);
			}

			if (!current || dirty[0] & /*listId*/ 32) {
				attr(div1, "aria-owns", /*listId*/ ctx[5]);
			}

			if (dirty[0] & /*classes, isExpanded*/ 18) {
				toggle_class(div1, "isExpanded", /*isExpanded*/ ctx[1]);
			}

			if (!current || dirty[0] & /*classes*/ 16 && div2_class_value !== (div2_class_value = "svelte-autocomplete-select " + (/*classes*/ ctx[4].container ?? ""))) {
				attr(div2, "class", div2_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(icon_slot, local);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			/*input_binding*/ ctx[25](null);
			if (icon_slot) icon_slot.d(detaching);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			div2_resize_listener();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let matches;
	let { $$slots: slots = {}, $$scope } = $$props;

	let { onSubmit = () => {
		
	} } = $$props;

	let { onInput = () => {
		
	} } = $$props;

	let { name } = $$props;
	let { getValue = option => option } = $$props;
	let { predicate = (results, search = "") => results.filter(result => getValue(result).toLowerCase().includes(search.toLowerCase())) } = $$props;
	let { options = [] } = $$props;
	let { isSelectRequired = false } = $$props;
	let { classes = {} } = $$props;
	let { value = "" } = $$props;
	let { listId = Date.now().toString() } = $$props;
	let { inputId } = $$props;
	let { placeholder = "" } = $$props;
	let { isExpanded = false } = $$props;
	let inputRef;
	let highlightIndex = 0;
	let containerHeight;

	const handleExpandResults = () => {
		$$invalidate(9, highlightIndex = 0);
		$$invalidate(1, isExpanded = true);
	};

	const hideResults = () => {
		$$invalidate(1, isExpanded = false);

		if (isSelectRequired && !options.find(option => getValue(option) === value)) {
			$$invalidate(0, value = "");
			onInput(value);
		}
	};

	const handleInput = event => {
		onInput(event);
		handleExpandResults();
	};

	const handleKeyDown = ({ key }) => {
		switch (key) {
			case "Escape":
				hideResults();
				break;
			case "ArrowUp":
				if (isExpanded && highlightIndex === 0) {
					$$invalidate(9, highlightIndex = matches.length - 1);
				} else {
					$$invalidate(9, highlightIndex -= 1);
				}
				break;
			case "ArrowDown":
				if (!value && !isExpanded) {
					handleExpandResults();
					break;
				}
				if (isExpanded && highlightIndex === matches.length - 1) {
					$$invalidate(9, highlightIndex = 0);
				} else {
					$$invalidate(9, highlightIndex += 1);
				}
				break;
			case "Tab":
				hideResults();
				break;
			case "Enter":
				handleSubmit(matches[highlightIndex] || value);
				break;
			default:
				return;
		}
	};

	const handleSubmit = match => {
		if (!match) return;
		onSubmit(match);
		$$invalidate(0, value = getValue(match));
		hideResults();
	};

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputRef = $$value;
			$$invalidate(8, inputRef);
		});
	}

	const click_handler = match => handleSubmit(match);

	function div2_elementresize_handler() {
		containerHeight = this.clientHeight;
		$$invalidate(10, containerHeight);
	}

	$$self.$$set = $$props => {
		if ("onSubmit" in $$props) $$invalidate(17, onSubmit = $$props.onSubmit);
		if ("onInput" in $$props) $$invalidate(18, onInput = $$props.onInput);
		if ("name" in $$props) $$invalidate(2, name = $$props.name);
		if ("getValue" in $$props) $$invalidate(3, getValue = $$props.getValue);
		if ("predicate" in $$props) $$invalidate(19, predicate = $$props.predicate);
		if ("options" in $$props) $$invalidate(20, options = $$props.options);
		if ("isSelectRequired" in $$props) $$invalidate(21, isSelectRequired = $$props.isSelectRequired);
		if ("classes" in $$props) $$invalidate(4, classes = $$props.classes);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("listId" in $$props) $$invalidate(5, listId = $$props.listId);
		if ("inputId" in $$props) $$invalidate(6, inputId = $$props.inputId);
		if ("placeholder" in $$props) $$invalidate(7, placeholder = $$props.placeholder);
		if ("isExpanded" in $$props) $$invalidate(1, isExpanded = $$props.isExpanded);
		if ("$$scope" in $$props) $$invalidate(22, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*predicate, options, value*/ 1572865) {
			 $$invalidate(11, matches = predicate(options, value));
		}
	};

	return [
		value,
		isExpanded,
		name,
		getValue,
		classes,
		listId,
		inputId,
		placeholder,
		inputRef,
		highlightIndex,
		containerHeight,
		matches,
		handleExpandResults,
		hideResults,
		handleInput,
		handleKeyDown,
		handleSubmit,
		onSubmit,
		onInput,
		predicate,
		options,
		isSelectRequired,
		$$scope,
		slots,
		input_input_handler,
		input_binding,
		click_handler,
		div2_elementresize_handler
	];
}

class AutocompleteSelect extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-tl3vld-style")) add_css();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				onSubmit: 17,
				onInput: 18,
				name: 2,
				getValue: 3,
				predicate: 19,
				options: 20,
				isSelectRequired: 21,
				classes: 4,
				value: 0,
				listId: 5,
				inputId: 6,
				placeholder: 7,
				isExpanded: 1
			},
			[-1, -1]
		);
	}
}

export default AutocompleteSelect;
