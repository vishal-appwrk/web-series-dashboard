import svelte from 'rollup-plugin-svelte';
import commonjs from '@rollup/plugin-commonjs';
import typescript from '@rollup/plugin-typescript';
import resolve from '@rollup/plugin-node-resolve';
import { terser } from 'rollup-plugin-terser';
import serve from 'rollup-plugin-serve';
import livereload from 'rollup-plugin-livereload';
import babel from 'rollup-plugin-babel';
import json from '@rollup/plugin-json';
import obfuscator from 'rollup-plugin-obfuscator';
import path from 'path';
import { visualizer } from 'rollup-plugin-visualizer';

const isProd = process.env.NODE_ENV === "production",
  isDev = process.env.NODE_ENV === "development",

  plugins = [
    commonjs(),
    svelte({
      onwarn: (warning, handler) => {
        if(warning === 'a11y-mouse-events-have-key-events') return;
      }
    }),
    resolve({
      extensions: ['.js', '.ts'],
      dedupe: importee => importee === 'svelte' || importee.startsWith('svelte/'),
      customResolveOptions: {
        moduleDirectory: 'node_modules'
      }
    }),
    typescript(),
    babel({
      extensions: [ '.js', '.mjs', '.html', '.svelte' ],
      runtimeHelpers: true,
      exclude: [ 'node_modules/@babel/**', 'node_modules/core-js/**' ],
      presets: [
        [
          '@babel/preset-env',
          {
            targets: '> 0.25%, not dead',
            useBuiltIns: 'usage',
            corejs: 3 
          }
        ]
      ]
    }),
    json(),
    visualizer({
      gzipSize: true,
      template: 'treemap',
      open: false
    })
  ];

if (isProd) {
  plugins.push( obfuscator({
    include: [path.resolve(__dirname, 'src', 'decryption/trier.ts')],
    fileOptions: {
      compact: true
    }
  }));
  plugins.push(terser({
    safari10: true
  }));
} else if (isDev) {
  plugins.push(serve({
    open: true,
    openPage: '/public/index.html',
    contentBase: ''
  }), livereload({
    watch: ['dist', 'public']
  }));
}

export default [{
  input: 'src/index.ts',
  output: {
    file: 'dist/fusiongrid.js',
    format: 'umd',
    name: 'FusionGrid'
  },
  plugins,
  external: ['fs']
},{
  input: 'src/index.ts',
  output: {
    file: 'dist/fusiongrid.esm.js',
    format: 'esm',
    name: 'FusionGrid'
  },
  plugins,
  external: ['fs']
},{
  input: 'src/index.ts',
  output: {
    file: 'cjs/index.js',
    format: 'cjs',
    name: 'FusionGrid',
    exports: 'auto'
  },
  plugins,
  external: ['fs']
}];