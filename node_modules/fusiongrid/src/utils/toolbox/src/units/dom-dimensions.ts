import { styleObjectType } from '../types';

export enum UnitType {
  px = 'px',
  em = 'em',
  rem = 'rem',
  pt = 'pt',
  percentage = '%'
}

export type ElementDimension = {
  width: number,
  height: number
}

/**
 * type to define properties that have length type property (eg. width, minWidth, maxWidth)
 */
export type validUnitLengthType = UnitType.em | UnitType.rem | UnitType.px | UnitType.pt | 'hPercentage' | 'wPercentage';

export function getSpanOffsetHeight (document: Document, container: HTMLElement, unit: validUnitLengthType): number {
  let paragraphEle: HTMLParagraphElement = document.createElement('p'),
    unitVal: number;
  paragraphEle.innerHTML = 'hello';
  paragraphEle.setAttribute('style', `visibility: hidden; font-size: 1${unit}; line-height: 1${unit}`);
  // adding element at a hidden state to the container, calculating offsetHeight and removing the node
  container.appendChild(paragraphEle);
  unitVal = paragraphEle.offsetHeight;
  container.removeChild(paragraphEle);
  // returning unit value for given unit
  return unitVal;
}

export function getSpanDimension (document: Document, container: HTMLElement, styleObj: styleObjectType = {}, value: string = 'WHOM'): ElementDimension {
  let spanhEle: HTMLSpanElement = document.createElement('span'),
    dim: ElementDimension,
    styleStr: string = '';
  spanhEle.innerHTML = value;
  if (styleObj) {
    for (let key in styleObj) {
      styleStr += key + ":" + styleObj[key] + ";";
    }
  }
  spanhEle.setAttribute('style', styleStr);
  // adding element at a hidden state to the container, calculating offsetHeight and removing the node
  container.appendChild(spanhEle);
  dim = {
    width: spanhEle.offsetWidth,
    height: spanhEle.offsetHeight
  };
  container.removeChild(spanhEle);
  // returning unit value for given unit
  return dim;
}