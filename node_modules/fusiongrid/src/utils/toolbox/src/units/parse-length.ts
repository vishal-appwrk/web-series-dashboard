import { validUnitLengthType } from './dom-dimensions';

export interface LengthUnits {
  readonly em: number
  readonly rem: number
  readonly px: number
  readonly pt: number
  readonly hPercentage: number
  readonly wPercentage: number
}

export function parseLengthUnit(val: any, lengthUnitsObject: LengthUnits, lengthType: string): number | undefined {
  let parsedNum: number | undefined,
    tmpVal: any = val,
    regToCheckValidInput:RegExp = /^([+]?(\d+|\.\d+|\d+\.\d+|\d+\.)(px|em|rem|%|pt))$/i,
    regToReplaceUnits: RegExp = /px|em|rem|%|pt/gi;
    // regTocheckValidNum:RegExp = /^([+]?(\d+|\.\d+|\d+\.\d+|\d+\.))$/;
  if (typeof tmpVal === 'number' && tmpVal > 0) {
    parsedNum = tmpVal;
  } else if (typeof tmpVal === 'string') {
    tmpVal = tmpVal.trim();
    if (regToCheckValidInput.test(tmpVal)) {
      parsedNum = Number(tmpVal.replace(regToReplaceUnits, ''));
      let matchedUnit: RegExpExecArray | null = regToReplaceUnits.exec(tmpVal);
      if (matchedUnit){
        if (matchedUnit[0] === '%') {
          (lengthType === 'height') && (parsedNum *= lengthUnitsObject.hPercentage);
          (lengthType === 'width') && (parsedNum *= lengthUnitsObject.wPercentage);
        } else {
          parsedNum *= lengthUnitsObject[<validUnitLengthType>matchedUnit[0]];
        }
      }
    } else if (Number(tmpVal) > 0) {
      parsedNum = Number(tmpVal);
    }
  }
  return parsedNum;
}