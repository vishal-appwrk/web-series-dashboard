/**
 * Convert keys of an object to lower case and also optionally lower case convert some values
 * @param obj any object or array of objects
 * @param ignorableProps optional array of properties for which the lower case operation will be ignored, typical use case is inline style definition which should not be converted to lower case
 * @param valsToConvert optional array of propertiesfor which the corresponding value will be converted to lower case
 * @param willIgnore internal usage mainly should not be used
 */
export default function convertKeysToLowerCase(obj: any, ignorableProps?: string[], valsToConvert?: string[], willIgnore: boolean = false): any {
  const type = typeof obj;

  if (obj === null || type === 'undefined') {
    return obj;
  }

  if (Array.isArray(obj)) {
    let arr = [];
    for (let i = 0; i < obj.length; i++) {
      arr.push(convertKeysToLowerCase(obj[i], ignorableProps, valsToConvert));
    }
    return arr;
  }

  if (type === 'object') {
    let clonedObj:any = {};
    // eslint-disable-next-line guard-for-in
    for (let prop in obj) {
      let lowerCaseProp = willIgnore ? prop : prop.toLowerCase();
      // Edge case handling for DataTable
      if (lowerCaseProp === 'data') {
        if (obj[prop] && obj[prop]._dataStore) {
          clonedObj[lowerCaseProp] = obj[prop];
        } else {
          clonedObj[lowerCaseProp] = convertKeysToLowerCase(obj[prop], ignorableProps, valsToConvert);
        }
        continue;
      }
      clonedObj[lowerCaseProp] = convertKeysToLowerCase(obj[prop], ignorableProps, valsToConvert, ignorableProps ? ignorableProps.indexOf(lowerCaseProp) > -1 : false);

      // If any key is specified for which the value should be converted to lower case
      if (valsToConvert && valsToConvert.indexOf(lowerCaseProp) > -1 && typeof clonedObj[lowerCaseProp] === 'string') {
        clonedObj[lowerCaseProp] = clonedObj[lowerCaseProp].toLowerCase();
      }
    }
    return clonedObj;
  }

  return obj;

}