const BOTTOM_STR = 'bottom',
  ABOSULTE_STR = 'absolute',
  VISIBLE_STR = 'visible',
  HIDDEN_STR = 'hidden';

function styleDeriver(direction){
  switch(direction){
    case 'bottom':
      return ['border-left', 'border-right', 'border-top'];
    case 'top':
      return ['border-left', 'border-right', 'border-bottom'];
    case 'left':
      return ['border-top', 'border-bottom', 'border-right'];
    case 'right':    
      return ['border-top', 'border-bottom', 'border-left'];
  }
}
function getPosition(x, y, width, height, length, direction){
  x = +x.replace(/[^-.0-9]/g,'');
  y = +y.replace(/[^-.0-9]/g,'');
  length = +length.replace(/[^-.0-9]/g,'');

  switch(direction){
    case 'bottom':
      return {
        left : x + (width / 2) - length,
        top: y + height
      };
    case 'top':
      return {
        left : x + (width / 2) - length,
        top: y - length
      };
    case 'left':
      return {
        left : x - length,
        top: y + (height / 2) - length
      };
    case 'right':    
      return {
        left : x + width,
        top: y + (height / 2) - length
      };
  }
}
class Beak {
  constructor(obj){
    this.config = {};
    this._container = obj.container;
    this._parent = obj.parent;
    this._element = document.createElement('div');
    this._container.appendChild(this._element);

    this.setDefaultConfig();
    this.configure(obj);
  }

  setDefaultConfig(){
    let config = this.config;
    config.direction = BOTTOM_STR;
    config.beakLength = '5px';
    config.beakColor = '#000000';
  }

  configure(config){
    let beak = this,
      beakConfig = beak.config;
        
    for (let key in config.beakProps){
      beakConfig[key] = config.beakProps[key];
    }
    beak.applyInlineStyles();
  }
  applyInlineStyles(){
    let beak = this,
      config = beak.config,
      beakElement = beak._element,
      applicableStyles = styleDeriver(config.direction),
      i,
      len;
            
    beakElement.style.width = '0px';
    beakElement.style.height = '0px';
    for (i =0, len = applicableStyles.length; i < len; i++){
      if (i !== len - 1){
        beakElement.style[applicableStyles[i]] = config.beakLength  + ' solid transparent';
      } else{
        beakElement.style[applicableStyles[i]] = config.beakLength  + ' solid ' + config.beakColor;
      }
    }
    beakElement.style.visibility  = HIDDEN_STR;
    beakElement.style.position = ABOSULTE_STR;
  }
  show(xPos, yPos){
    let beak = this,
      config = beak.config,
      parent = beak._parent,
      parentWidth = parent.offsetWidth,
      parentHeight = parent.offsetHeight,
      beakLength = config.beakLength,
      { left, top } = getPosition(xPos, yPos, parentWidth, parentHeight, beakLength, config.direction),
      beakElem = beak._element;
    beakElem.style.left = left + 'px';
    beakElem.style.top = top + 'px';
    beakElem.style.visibility  = VISIBLE_STR;
  }
  hide(){
    let beak = this,
      beakElem = beak._element;
    beakElem.style.visibility  = HIDDEN_STR;
  }
}
export default Beak;