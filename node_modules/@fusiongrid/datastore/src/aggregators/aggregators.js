const sum = (prevSum, value) => prevSum + value,

  avg = (prevAvg, value, n) => (((n - 1) * prevAvg) + value) / n,

  count = prevCount => prevCount + 1,

  min = (prevMin, value) =>
    prevMin !== null ? (prevMin > value ? value : prevMin) : value,

  max = (prevMax, value) =>
    prevMax !== null ? prevMax < value ? value : prevMax : value,

  first = (prevFirst, value) => prevFirst === null ? value : prevFirst,

  last = (prevLast, value) => value,

  variance = (prevVal, value, n) => {
    let mean = value,
      vr = 0,
      prevMean;

    if (prevVal) {
      mean = prevVal.avg;
      vr = prevVal.variance;
    }

    prevMean = mean;

    if (n > 1) {
      mean = avg(mean, value, n);
      vr = ((vr * (n - 2)) + ((value - mean) * (value - prevMean))) / (n - 1);
    }

    return { avg: mean, variance: vr };
  },

  stddev = (prevVal, value, n) => {
    let newPrevVal, vr;

    if (prevVal) {
      newPrevVal = {
        avg: prevVal.avg,
        variance: prevVal.stddev * prevVal.stddev
      };
    }

    vr = variance(newPrevVal, value, n);

    return { avg: vr.avg, stddev: Math.sqrt(vr.variance) };
  };

export { sum, avg, count, min, max, first, last, variance, stddev };
