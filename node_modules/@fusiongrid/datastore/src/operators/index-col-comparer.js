import { FieldType } from '../enums';
import { numberComparator, stringComparator } from '../toolbox/src/index';
/**
 * Get the compararer function for a particular column
 * @param {*} schema
 * @param {number} columnIndex index of the column to determine comparer
 * @param {boolean} isCaseSensitive if the comparison should be case sensitive, default is false
 */
const getIndexColComparer = (schema, columnIndex, isCaseSensitive = false) => {
    switch (schema[columnIndex].type) {
      case FieldType.Interval: // for interval column we compare the value with the start value of interval
        return (a, b) => numberComparator(a[columnIndex].start, b);
      case FieldType.Number:
      case FieldType.DateTime:
        return (a, b) => numberComparator(a[columnIndex], b);
      default: 
        return isCaseSensitive ? (a, b) => stringComparator(a[columnIndex], b) : (a, b) => stringComparator(String(a[columnIndex]).toLowerCase(), String(b).toLowerCase()); 
    }
  }, getComparer = (type, isCaseSensitive = false) => {
    switch (type) {      
      case FieldType.Number:
      case FieldType.DateTime:
        return (a, b) => numberComparator(a, b);
      default: 
        return isCaseSensitive ? (a, b) => stringComparator(a, b) : (a, b) => stringComparator(String(a).toLowerCase(), String(b).toLowerCase()); 
    }
  };

export { getIndexColComparer, getComparer };
