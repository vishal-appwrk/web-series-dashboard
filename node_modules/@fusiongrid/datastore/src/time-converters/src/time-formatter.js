import pads from './pads.js';

/**
 * @type {number}
 */
const PERCENT_CHAR_CODE = 37,
  isNil = x => x === null || typeof x === 'undefined';

/**
 * A TimeFormatter is able to format a Javascript Date instance into strings according
 * to the given specifier and locale specific formatter functions.
 */
class TimeFormatter {
  /**
   * @param {string} specifier The specifier using which the formatter will format strings
   * @param {object} formats An object containing locale specific formatting functions
   * keyed by specifier directives.
   */
  constructor (specifier, formats) {
    /**
     * @type {string}
     */
    this._specifier = specifier;
    /**
     * @type {object}
     */
    this._formats = formats;
  }

  /**
   * Formats a given JavaScript Date instance into a string according to the given specifier.
   *
   * @param {Date} _date The JavaScript Date instance which will be formatted into a string.
   *
   * @returns {string} A string representation of the provided date.
   */
  format (_date) {
    var string = [],
      date = _date,
      i = -1,
      j = 0,
      specifier = this._specifier,
      n = specifier.length,
      c,
      pad,
      format;

    if (!(date instanceof Date)) date = new Date(+date);

    while (++i < n) {
      if (specifier.charCodeAt(i) === PERCENT_CHAR_CODE) {
        string.push(specifier.slice(j, i));
        c = specifier.charAt(++i);
        pad = pads[c];

        if (isNil(pad)) {
          pad = c === 'e' ? ' ' : '0';
        } else {
          c = specifier.charAt(++i);
        }

        format = this._formats[c];

        if (format) {
          c = format(date, pad);
        }

        string.push(c);
        j = i + 1;
      }
    }

    string.push(specifier.slice(j, i));
    return string.join('');
  }

  /**
   * @returns {string} The specifier string using which Dates are formatted into strings
   */
  toString () {
    return this._specifier;
  }
}

export default TimeFormatter;
