import { TimeConverter } from './index.js';
import TimeFormatter from './time-formatter.js';
import enUS from './locales/en-US.js';
import TimeParser from './time-parser.js';

/**
 * @type {string}
 */
const ISO_SPECIFIER = '%Y-%m-%dT%H:%M:%S.%LZ';

/**
 * An ISOTimeConverter can be used to format and parse dates in a number of
 * locale specific representations. To create a converter, pass a locale
 * object when instantiating the ISOTimeConverter.
 */
class IsoTimeConverter extends TimeConverter {
  /**
   * The full ISO 8601 UTC time formatter. Where available, this method will use
   * Date#toISOString to format.
   *
   * @returns {Object|TimeFormatter} If `Date#toISOString` is available, returns a
   * {@link TimeFormatter}-like object with format and toString methods. Otherwise,
   * returns a {@link TimeFormatter} which is able to format a JavaScript Date
   * instance according to the ISO 8601 specifier string.
   */
  formatter () {
    if (Date.prototype.toISOString) {
      return {
        format: d => d.toISOString(),
        toString: () => ISO_SPECIFIER
      };
    }
    return new TimeFormatter(ISO_SPECIFIER, this._utcFormats);
  }

  /**
   * See {@link IsoTimeConverter#formatter}.
   *
   * @returns {Object|TimeFormatter}
   */
  utcFormatter () {
    return this.formatter();
  }

  /**
   * The full ISO 8601 UTC time parser. Where possible, this method will use the
   * Date constructor to parse strings. If strict parsing of the input format
   * according to ISO 8601 is desired, use the regular {@link TimeConverter}'s UTC
   * parser method instead.
   *
   * @returns {Object|TimeParser} When possible to use the Date constructor to parse
   * strings, returns a {@link TimeParser}-like object which implements parse and
   * toString but does NOT implement a parseSpecifier method. Otherwise returns a
   * {@link TimeParser} which is able to parse a string formatted according to the
   * ISO 8601 standard into a JavaScript Date instance.
   */
  parser () {
    if (+new Date('2000-01-01T00:00:00.000Z')) {
      return {
        parse: string => {
          const date = new Date(string);
          return isNaN(date) ? null : date;
        },
        toString: () => ISO_SPECIFIER
      };
    }
    return new TimeParser(ISO_SPECIFIER, this._parses, d => {
      if (d.y >= 0 && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
      }
      return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
    });
  }

  /**
   * See {@link IsoTimeConverter#parser}.
   *
   * @returns {Object|TimeParser}
   */
  utcParser () {
    return this.parser();
  }
}

export { IsoTimeConverter };

/**
 * An instance of {@link IsoTimeConverter} initialized with the
 * English (United States) locale definition.
 * @type {IsoTimeConverter}
 */
export default new IsoTimeConverter(enUS);
