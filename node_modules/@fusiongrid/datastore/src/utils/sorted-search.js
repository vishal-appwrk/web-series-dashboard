/**
 * Find the left most element compared with a value
 * If multiple exact matches are found then returns the left most one or first occurrence
 * If no matches are found then returns the next greater element position of value
 * @param {*} val
 * @param {Array} arr
 * @param {*} comparer
 * @param {number} startPos
 * @param {number} endPos
 */
function leftMostExactOrGreater (val, arr, comparer, startPos, endPos) {
  let left = startPos, right = endPos;
  while (left < right) {
    let mid = left + Math.floor((right - left) / 2);
    if (comparer(arr[mid], val) < 0) { left = mid + 1; } else { right = mid; }
  }

  return left;
}

/**
 * Find the right most element compared with a value
 * If multiple exact matches are found then returns the right most one or last occurrence
 * If no matches are found then returns the last lesser element position of value
 * @param {*} val
 * @param {Array} arr
 * @param {*} comparer
 * @param {number} startPos
 * @param {number} endPos
 */
function rightMostExactOrLesser (val, arr, comparer, startPos, endPos) {
  let left = startPos, right = endPos;
  while (left < right) {
    let mid = left + Math.floor((right - left) / 2);
    if (comparer(arr[mid], val) > 0) { right = mid; } else { left = mid + 1; }
  }

  return left - 1;
}

export { leftMostExactOrGreater, rightMostExactOrLesser };
