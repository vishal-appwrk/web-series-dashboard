/* eslint-disable no-undefined */
export default function operate(condition, columnDetails, firstValue, secondValue , rangeEndValue) {
  let operatorCondition = condition.toUpperCase().split(' ').join('_'),
    columnType = columnDetails.type,
    first,
    second,
    rangeEnd;

  if(columnType === 'datetime'){
    const secondValueFormatted = secondValue?.replaceAll('-','/'),
      rangeEndValueFormatted = rangeEndValue?.replaceAll('-','/');
    first = new Date(firstValue).getTime();
    if(isNaN(Date.parse(secondValueFormatted)) === false) {
      second = new Date(secondValueFormatted).getTime();
    }
    if(isNaN(Date.parse(rangeEndValueFormatted)) === false) {
      rangeEnd = new Date(rangeEndValueFormatted).getTime();
    }
  } else if (columnType === 'number'){
    first = firstValue;
    second = secondValue;
    rangeEnd = rangeEndValue;
  } else {
    first = firstValue && firstValue.toLowerCase();
    second = secondValue && secondValue.toLowerCase();
  }


  switch(operatorCondition){
    case 'EQUALS': return first === second;
    case 'NOT_EQUAL_TO': return first !== second;
    case 'LESS_THAN': return first < second;
    case 'GREATER_THAN': return first > second;
    case 'LESS_THAN_OR_EQUAL_TO': return first <= second;
    case 'GREATER_THAN_OR_EQUAL_TO': return first >= second;
    case 'BETWEEN': return first >= second && first <= rangeEndValue;

    case 'IS': return first === second; 
    case 'IS_NOT': return !(first === second);
    case 'IS_BEFORE': return first < second;
    case 'IS_AFTER': return first > second;
    case 'IS_ON_AND_BEFORE': return first <= second;
    case 'IS_ON_AND_AFTER': return first >= second;
    case 'IS_WITHIN': return first >= second && first <= rangeEnd;

    // Date type specific cases
    case 'CONTAINS': return first.includes(second);
    case 'DOES_NOT_CONTAIN': return !first.includes(second);
    case 'STARTS_WITH': return first.slice(0, second.length) === second;
    case 'ENDS_WITH': return first.slice(first.length - second.length, first.length) === second;
    case 'IS_EMPTY': return !first;
    case 'IS_NOT_EMPTY': return first;
    default: return true;
  }
}