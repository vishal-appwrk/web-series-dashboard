import or from '../../src/operators/or-operation';
import not from '../../src/operators/not-operation';
import { greater } from '../../src/operators/filter-operations';
import { startsWith } from '../../src/operators/string-filters';
import { filter, select } from '../../src/operators/select-filter';

let UNDEF;
const data = [
    ['Mike Bostock', 50, +new Date(2020, 1, 1), 1],
    ['Rich Harris', 45, +new Date(2020, 1, 1), 2],
    ['Mike Bostock', 50, +new Date(2020, 2, 2), 3],
    ['Michelle Obama', 55, +new Date(2020, 2, 5), 4],
    ['Michelle Stark', 35, +new Date(2020, 1, 1), 5],
    ['Arya Stark', 21, +new Date(2020, 5, 2), 6],
    ['Richie Rich', 21, +new Date(2020, 2, 2), 7],
    ['Richie Richardson', 45, +new Date(2020, 2, 5), 8],
    ['Ryan Harris', 35, +new Date(2020, 8, 5), 9],
    ['Harrison Ford', 35, +new Date(2020, 8, 5), 10],
    ['Michelle Stark', 35, +new Date(2020, 1, 1), 11],
    ['Barrack Obama', 58, +new Date(2020, 8, 5), 12],
    [2,100, +new Date(2020, 2, 9), 13],
    ['2',100, +new Date(2020, 2, 9), 14],
    [UNDEF,25, +new Date(2020, 2, 9), 15],
    [null, null, +new Date(2020, 1, 1), 16],
    ['A+b*', 25, +new Date(2020, 8, 5), 17],
    ['a+b*', 25, +new Date(2020, 8, 5), 18],
    ['*8b*', 25, +new Date(2020, 7, 8), 19],
  ], schema = [
    {
      name: 'Name'
    }, {
      name: 'Age',
      type: 'number'
    }, {
      name: 'Entry_Date',
      type: 'datetime'
    }, {
      name: '_row_id',
      type: 'number'
    }
  ];

describe('Not operation - ', () => {
  it('simple not operation', () => {
    let greaterOps = greater('Age', 50),
      notOps = not(greaterOps),
      notOpsFn = notOps.fn(data, schema),
      result = notOpsFn.generatorFn();
    expect(result.length).toBe(15);
  });

  it('simple not operation where row id is not present', () => {
    let greaterOps = greater('Age', 50),
      notOps = not(greaterOps),
      withoutIdData = data.map(x => x.slice(0, 3)),
      withoutIdSchema = schema.slice(0, 3),
      notOpsFn = notOps.fn(withoutIdData, withoutIdSchema),
      result = notOpsFn.generatorFn();
    expect(result.length).toBe(15);
  });

  it('not operation with string', () => {
    let startsWithOps = startsWith('Name', 'Mi'),
      notOps = not(startsWithOps),
      notOpsFn = notOps.fn(data, schema),
      result = notOpsFn.generatorFn();
    expect(result.length).toBe(14);
  });

  it('works with other logical operator as well', () => {
    let greaterOps = greater('Age', 50),
      filterOps = filter(row => typeof row[0] !== 'string'),
      orOps = or(greaterOps, filterOps),
      notOps = not(orOps),
      notOpsFn = notOps.fn(data, schema),
      result = notOpsFn.generatorFn();
    expect(result.length).toBe(13);
  });

  it('throws error if parameter is missing', () => {
    let notOps = not();
    expect(() => { notOps.fn(data, schema); }).toThrow();
  });

  it('throws error if parameter is mismatched', () => {
    let notOps = not('hello');
    expect(() => { notOps.fn(data, schema); }).toThrow();
  });

  it('throws error if other ops than filter is used', () => {
    let selectOps = select(['Name', 'Age']),
      notOps = not(selectOps);

    expect(() => { notOps.fn(data, schema); }).toThrow();
  });
});