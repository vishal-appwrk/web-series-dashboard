import { filter, between, select, pipe, indexColLess, sort, groupBy } from '../../src/operators';

let filter1 = filter((row) => row.Name === 'value'),
  between1 = between('Hello', 10, 100),
  indexColLess1 = indexColLess('Name', 20),
  select1 = select(['Name', 'Revenue']),
  select2 = select(['Date', 'Count']),
  select3 = select(['Date2', 'Count2']),
  sort1 = sort('config'),
  sort2 = sort('config2'),
  groupBy1 = groupBy([{ name: 'val' }], [{ 'name': 'val2' }]),
  groupBy2 = groupBy([{ name: 'va3' }], [{ 'name': 'val4' }]),
  pipeQuery1, pipeQuery2, pipeQuery3;

describe('Pipe operation test - ', () => {
  it('Reorganizes filter, select and sort', () => {
    pipeQuery1 = pipe(filter1, between1, select1, select2, indexColLess1, sort1, select3, sort2);
    let nameArr = pipeQuery1.map(x => x.ops);
    expect(nameArr).toEqual(['indexColLess', 'filter', 'between', 'sort', 'select']);
  });

  it('Removes select, sort between 2 group by and reorganizes filter, select, sort for the last bracket', () => {
    pipeQuery2 = pipe(filter1, indexColLess1, select1, select2, groupBy1, select1, select2, sort2, filter1, sort1, groupBy2, filter1, between1, select1, select2, indexColLess1, sort1, select3, sort2);
    let nameArr = pipeQuery2.map(x => x.ops);
    expect(nameArr).toEqual(['indexColLess', 'filter', 'groupBy', 'filter', 'groupBy', 'indexColLess', 'filter', 'between', 'sort', 'select']);
  });

  it('Pipe query with incorrect arguments - should ignore them', () => {
    pipeQuery3 = pipe(filter1, indexColLess1, 1, select1, select2, 'infinity', groupBy1, select1, select2, new Date('1988-8-5'), sort2, filter1, sort1, groupBy2, filter1, between1, select1, select2, indexColLess1, sort1, select3, sort2);
    let nameArr = pipeQuery3.map(x => x.ops);
    expect(nameArr).toEqual(['indexColLess', 'filter', 'groupBy', 'filter', 'groupBy', 'indexColLess', 'filter', 'between', 'sort', 'select']);
  });
});
