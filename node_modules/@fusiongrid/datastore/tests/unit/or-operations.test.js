import or from '../../src/operators/or-operation';
import { greater, equals } from '../../src/operators/filter-operations';
import { startsWith } from '../../src/operators/string-filters';
import { filter, select } from '../../src/operators/select-filter';
import sort from '../../src/operators/sort';

let UNDEF;
const data = [
    ['Mike Bostock', 50, +new Date(2020, 1, 1)],
    ['Rich Harris', 45, +new Date(2020, 1, 1)],
    ['Mike Bostock', 50, +new Date(2020, 2, 2)],
    ['Michelle Obama', 55, +new Date(2020, 2, 5)],
    ['Michelle Stark', 35, +new Date(2020, 1, 1)],
    ['Arya Stark', 21, +new Date(2020, 5, 2)],
    ['Richie Rich', 21, +new Date(2020, 2, 2)],
    ['Richie Richardson', 45, +new Date(2020, 2, 5)],
    ['Ryan Harris', 35, +new Date(2020, 8, 5)],
    ['Harrison Ford', 35, +new Date(2020, 8, 5)],
    ['Michelle Stark', 35, +new Date(2020, 1, 1)],
    ['Barrack Obama', 58, +new Date(2020, 8, 5)],
    [2,100, +new Date(2020, 2, 9)],
    ['2',100, +new Date(2020, 2, 9)],
    [UNDEF,25, +new Date(2020, 2, 9)],
    [null, null, +new Date(2020, 1, 1)],
    ['A+b*', 25, +new Date(2020, 8, 5)],
    ['a+b*', 25, +new Date(2020, 8, 5)],
    ['*8b*', 25, +new Date(2020, 7, 8)],
  ], schema = [
    {
      name: 'Name'
    }, {
      name: 'Age',
      type: 'number'
    }, {
      name: 'Entry_Date',
      type: 'datetime'
    }
  ];

describe('Or operation - ', () => {
  it('combine result of 2 operations', () => {
    let greaterOps = greater('Age', 50),
      filterOps = filter((row) => typeof row[0] !== 'string'),
      orOps = or(greaterOps, filterOps),
      orOpsFn = orOps.fn(data, schema),
      result = orOpsFn.generatorFn();
    expect(result.length).toBe(6);
  });

  it('combine results of one string operations and one number operations', () => {
    let greaterOps = greater('Age', 50),
      startsWithOps = startsWith('Name', 'Mi'),
      orOps = or(greaterOps, startsWithOps),
      orOpsFn = orOps.fn(data, schema),
      result = orOpsFn.generatorFn();
    expect(result.length).toBe(8);
  });

  it('can overshadow the result of one operation by another operation', () => {
    let greaterOps = greater('Age', 49),
      startsWithOps = equals('Name', 'Mike Bostock'),
      orOps = or(greaterOps, startsWithOps),
      orOpsFn = orOps.fn(data, schema),
      result = orOpsFn.generatorFn();
    expect(result.length).toBe(6);
  });

  it('throws error if parameter is missing', () => {
    let greaterOps = greater('Age', 49),
      orOps = or(greaterOps);
    expect(() => { orOps.fn(data, schema); }).toThrow();
    orOps = or();
    expect(() => { orOps.fn(data, schema); }).toThrow();
  });

  it('throws error if parameter is mismatched', () => {
    let greaterOps = greater('Age', 49),
      orOps = or(greaterOps, 'hello');
    expect(() => { orOps.fn(data, schema); }).toThrow();
    orOps = or('hi', 'hello');
    expect(() => { orOps.fn(data, schema); }).toThrow();
  });

  it('throws error if other ops than filter is used', () => {
    let selectOps = select(['Name', 'Age']),
      sortOps = sort({ column: 'Name' }),
      orOps = or(selectOps, sortOps);

    expect(() => { orOps.fn(data, schema); }).toThrow();
  });
});