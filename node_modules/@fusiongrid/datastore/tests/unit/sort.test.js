import { data5rows, carsData } from '../../sample/data/cars';
import sort, { binaryInsertionSort, mergeSort } from '../../src/utils/sort';
import isSorted from '../../src/utils/datatable-sort-utils';

describe('Binary insertion sort - ', () => {
  let numberArr = [5, 1, 2, 4, 9, 2, 1, 5, 9, 3, 2];
  it('Tests if it properly sorts in ascending order - ', () => {
    let numberDup = numberArr.slice(0);
    binaryInsertionSort(numberDup);
    expect(numberDup).toEqual([1, 1, 2, 2, 2, 3, 4, 5, 5, 9, 9]);
  });

  it('Tests if it properly sorts in descending order - ', () => {
    let numberDup = numberArr.slice(0);
    binaryInsertionSort(numberDup, (a, b) => { return (b - a); });
    expect(numberDup).toEqual([1, 1, 2, 2, 2, 3, 4, 5, 5, 9, 9].reverse());
  });

  it('Tests if it the sort is stable - ', () => {
    let numberDup = data5rows.slice(0), nameArr;
    binaryInsertionSort(numberDup, (a, b) => { return (a[1] - b[1]); });
    nameArr = numberDup.map(x => x[0]);
    expect(nameArr).toEqual(['buick skylark 320', 'amc rebel sst', 'ford torino', 'chevrolet chevelle malibu', 'plymouth satellite']);
  });
});

describe('Tim sort on number column - ascending order ', () => {
  let carsDataCopy = carsData.slice(0);
  sort(carsDataCopy, (a, b) => a.Miles_per_Gallon - b.Miles_per_Gallon);
  // carsDataCopy.sort((a, b) => a.Miles_per_Gallon - b.Miles_per_Gallon);
  it('sorts the array in ascending order', () => {
    expect(isSorted(carsDataCopy, (a, b) => a.Miles_per_Gallon - b.Miles_per_Gallon)).toBe(true);
  });

  it('is a stable sort', () => {
    expect(carsDataCopy.filter(x => x.Miles_per_Gallon === 27).map(x => x.Name)).toEqual(['datsun pl510', 'datsun pl510', 'volkswagen model 111', 'toyota corolla 1600 (sw)', 'renault 12tl', 'chevrolet cavalier wagon', 'pontiac phoenix', 'chevrolet camaro', 'ford mustang gl']);
  });
});

describe('Tim sort on number column - descending order ', () => {
  let carsDataCopy = carsData.slice(0);
  sort(carsDataCopy, (a, b) => b.Miles_per_Gallon - a.Miles_per_Gallon);
  // carsDataCopy.sort((a, b) => b.Miles_per_Gallon - a.Miles_per_Gallon);
  it('sorts the array in descending order', () => {
    expect(isSorted(carsDataCopy, (a, b) => b.Miles_per_Gallon - a.Miles_per_Gallon)).toBe(true);
  });

  it('is a stable sort', () => {
    expect(carsDataCopy.filter(x => x.Miles_per_Gallon === 27).map(x => x.Name)).toEqual(['datsun pl510', 'datsun pl510', 'volkswagen model 111', 'toyota corolla 1600 (sw)', 'renault 12tl', 'chevrolet cavalier wagon', 'pontiac phoenix', 'chevrolet camaro', 'ford mustang gl']);
  });
});

describe('Tim sort on string column - ascending order ', () => {
  let carsDataCopy = carsData.slice(0);
  sort(carsDataCopy, (a, b) => a.Name.localeCompare(b.Name));
  // carsDataCopy.sort((a, b) => a.Name.localeCompare(b.Name));
  it('sorts the array in descending order', () => {
    expect(isSorted(carsDataCopy, (a, b) => a.Name.localeCompare(b.Name))).toBe(true);
  });

  it('sorts the array in descending order - first element check', () => {
    expect(carsDataCopy[0].Name).toBe('amc ambassador brougham');
  });
});

describe('Merge sort on number column - ascending order ', () => {
  let carsDataCopy = mergeSort(carsData, (a, b) => a.Miles_per_Gallon - b.Miles_per_Gallon);
  // carsDataCopy.sort((a, b) => a.Miles_per_Gallon - b.Miles_per_Gallon);
  it('sorts the array in ascending order', () => {
    expect(isSorted(carsDataCopy, (a, b) => a.Miles_per_Gallon - b.Miles_per_Gallon)).toBe(true);
  });

  it('is a stable sort', () => {
    expect(carsDataCopy.filter(x => x.Miles_per_Gallon === 27).map(x => x.Name)).toEqual(['datsun pl510', 'datsun pl510', 'volkswagen model 111', 'toyota corolla 1600 (sw)', 'renault 12tl', 'chevrolet cavalier wagon', 'pontiac phoenix', 'chevrolet camaro', 'ford mustang gl']);
  });

  it('does not change the original array', () => {
    expect(carsData[0].Name).toBe('chevrolet chevelle malibu');
    expect(carsDataCopy[0].Name).toBe('citroen ds-21 pallas');
  });
});

describe('Merge sort on number column - descending order ', () => {
  let carsDataCopy = mergeSort(carsData, (a, b) => b.Miles_per_Gallon - a.Miles_per_Gallon);
  // carsDataCopy.sort((a, b) => b.Miles_per_Gallon - a.Miles_per_Gallon);
  it('sorts the array in descending order', () => {
    expect(isSorted(carsDataCopy, (a, b) => b.Miles_per_Gallon - a.Miles_per_Gallon)).toBe(true);
  });

  it('is a stable sort', () => {
    expect(carsDataCopy.filter(x => x.Miles_per_Gallon === 27).map(x => x.Name)).toEqual(['datsun pl510', 'datsun pl510', 'volkswagen model 111', 'toyota corolla 1600 (sw)', 'renault 12tl', 'chevrolet cavalier wagon', 'pontiac phoenix', 'chevrolet camaro', 'ford mustang gl']);
  });
});

describe('Merge sort on string column - ascending order ', () => {
  let carsDataCopy = mergeSort(carsData, (a, b) => a.Name.localeCompare(b.Name));
  // carsDataCopy.sort((a, b) => a.Name.localeCompare(b.Name));
  it('sorts the array in descending order', () => {
    expect(isSorted(carsDataCopy, (a, b) => a.Name.localeCompare(b.Name))).toBe(true);
  });

  it('sorts the array in descending order - first element check', () => {
    expect(carsDataCopy[0].Name).toBe('amc ambassador brougham');
  });
});
