import DataStore from '../../src/datastore';
import DataTable from '../../src/datatable';
import { schema, data5rows, carsData } from '../../sample/data/cars';
import { indexColBetween, indexColLess } from '../../src/operators';
import { ROW_ID_COL_NAME } from '../../src/globals/defaults';

let data = data5rows,
  validDataStore = new DataStore(data, schema),
  validMultiTableDS = new DataStore(),
  table1, table2, table3, table4,
  changedConfigDT,
  indexedConfigDT,
  uncleanDataDt,
  uncleanData, jsonDT, UNDEF;

table1 = validMultiTableDS.createDataTable(data5rows, schema);
table2 = validMultiTableDS.createDataTable(data5rows, schema, 'table-2', { enableIndex: true, indexBy: 'Acceleration' });
table3 = validMultiTableDS.createDataTable(carsData, schema, 'table-3', { enableIndex: true, indexBy: 'Origin' });
table4 = validMultiTableDS.createDataTable(carsData, schema, 'carsTable', { enableIndex: false });

describe('DataStore constructor', () => {
  it('FDT_TC_005 - without config - enableIndex should be false', () => {
    expect(validDataStore.dataTables['table-1']._config.enableIndex).toBe(false);
  });

  it('FDT_TC_005 - without config - enableUTC should be false', () => {
    expect(validDataStore.dataTables['table-1']._config.enableUTC).toBe(false);
  });

  let invalidDataStore = new DataStore([], schema);
  it('FDT_TC_003 - blank input but valid schema', () => {
    expect(invalidDataStore.dataTables['table-1']._data.length).toBe(0);
  });

  it('FDT_TC_004 - constructor with no arguments', () => {
    expect(() => {
      invalidDataStore = new DataStore();
      invalidDataStore.createDataTable();
    }).toThrow(Error);
  });

  it('FDT_TC_006_1 - constructor with wrong arguments', () => {
    expect(() => {
      invalidDataStore = new DataStore();
      invalidDataStore.createDataTable(schema, { enableIndex: true });
    }).toThrow(Error);
  });

  it('FDT_TC_006_2 - constructor with wrong arguments', () => {
    expect(() => {
      invalidDataStore = new DataStore();
      invalidDataStore.createDataTable(data);
    }).toThrow(Error);
  });

  it('FDT_TC_006_3 - constructor with wrong arguments', () => {
    expect(() => {
      invalidDataStore = new DataStore();
      invalidDataStore.createDataTable(schema);
    }).toThrow(Error);
  });

  it('FDT_TC_006_4 - constructor with wrong arguments', () => {
    expect(() => {
      invalidDataStore = new DataStore();
      invalidDataStore.createDataTable(data, { column: 'Name' });
    }).toThrow(Error);
  });

  it('Constructor with zero element schema - should throw error', () => {
    expect(() => {
      invalidDataStore = new DataStore();
      invalidDataStore.createDataTable(data, []);
    }).toThrow(Error);
  });

  it('Constructor where schema has a column with no name - should throw error', () => {
    let newSchema = { ...{ 'type': 'number' }, ...schema };
    expect(() => {
      invalidDataStore = new DataStore();
      invalidDataStore.createDataTable(data, newSchema);
    }).toThrow(Error);
  });

  it('Schema has more element than data - last columns should be undefined', () => {
    let newSchema = schema.slice(0), dataStore;
    newSchema.push({
      name: 'invalid_column',
      type: 'number'
    });
    newSchema.push({
      name: 'invalid_column2',
      type: 'datetime'
    });
    newSchema.push({
      name: 'invalid_column3'
    });
    dataStore = new DataStore(data, newSchema, { enableIndex: false });
    expect(dataStore.dataTables['table-1']._data[0][newSchema.length - 1]).toBeUndefined();
    expect(dataStore.dataTables['table-1']._data[0][newSchema.length - 2]).toBeUndefined();
    expect(dataStore.dataTables['table-1']._data[0][dataStore.dataTables['table-1'].indexOf(ROW_ID_COL_NAME)]).toBe(1);
  });

  it('Schema has fewer elements than data columns - last columns should be discarded', () => {
    let newSchema = schema.slice(0), dataStore;
    newSchema.splice(7);
    dataStore = new DataStore(data, newSchema, { enableIndex: false });
    expect(dataStore.dataTables['table-1']._data[0].length).toBe(8);
    expect(dataStore.dataTables['table-1']._data[0][dataStore.dataTables['table-1']._data[0].length - 2]).toBe(12);
  });

  uncleanData = data.slice(0);
  uncleanData.push([
    'ford torino',
    '26',
    '',
    '311',
    '0',
    3449,
    10.5,
    '1970-01-01',
    'USA'
  ]);
  uncleanDataDt = new DataStore(uncleanData, schema);
  it('parses string as number', () => {
    expect(uncleanDataDt.dataTables['table-1']._data[uncleanDataDt.dataTables['table-1']._data.length - 1][1]).toBe(26);
    expect(uncleanDataDt.dataTables['table-1']._data[uncleanDataDt.dataTables['table-1']._data.length - 1][3]).toBe(311);
    expect(uncleanDataDt.dataTables['table-1']._data[uncleanDataDt.dataTables['table-1']._data.length - 1][4]).toBe(0);
  });

  changedConfigDT = new DataStore().createDataTable(data, schema, 'table-1', {
    enableIndex: false,
    enableUTC: true
  });
  it('Custom config - enableIndex should be false', () => {
    expect(changedConfigDT._config.enableIndex).toBe(false);
  });
  it('Custom config - enableUTC should be true', () => {
    expect(changedConfigDT._config.enableUTC).toBe(true);
  });

  indexedConfigDT = new DataStore().createDataTable(data, schema, 'table-1', {
    enableIndex: true,
    indexBy: 'Weight_in_lbs'
  });

  it('Check if data is porperly sorted when index by is provided', () => {
    expect(indexedConfigDT._data[0][0]).toBe('amc rebel sst');
  });

  it('Check if original data is unaffected when index by is provided', () => {
    expect(data[0][0]).toBe('chevrolet chevelle malibu');
  });

  jsonDT = new DataStore(carsData, schema);
  it('parses the JSON data', () => {
    expect(jsonDT.dataTables['table-1']._data.length).toBe(406);
    expect(jsonDT.dataTables['table-1']._data[0][0]).toBe('chevrolet chevelle malibu');
    expect(jsonDT.dataTables['table-1']._data[jsonDT.dataTables['table-1']._data.length - 1][0]).toBe('chevy s-10');
  });
});

describe('DataStore API - createDataTable', () => {

  it('createDataTable API does not mutate either data, schema or config', () => {
    const duplicate_data5rows = data5rows.map(x => x.slice(0)),
      duplicate_schema = JSON.parse(JSON.stringify(schema)),
      config = { enableIndex: true, indexBy: 'Acceleration', enableUTC: false },
      duplicate_config = Object.assign({}, config),
      dataTable = new DataStore().createDataTable(data5rows, schema, 'table-1', config);

    expect(data5rows).toStrictEqual(duplicate_data5rows);
    expect(schema).toStrictEqual(duplicate_schema);
    expect(config).toStrictEqual(duplicate_config);
    expect(schema.length).toBe(dataTable.getData().schema.length - 1);
  });

  it('DataTable row id consistent', () => {
    const dataStore = new DataStore(),
      dataTable = dataStore.createDataTable(data5rows, schema, 'table-1'),
      tableData = dataTable.getData().data,
      row_id_arr = tableData.map(x => x[dataTable.indexOf(ROW_ID_COL_NAME)]),
      id_to_match = [1, 2, 3, 4, 5];

    expect(row_id_arr).toStrictEqual(id_to_match);
  });

  it('Parses data correctly for string column', () => {
    const hybridData = [
        ['A', 10],
        ['B', 10],
        [5, 10],
        ['C', 10],
        [7, 10],
        [10, 10],
        [UNDEF, 10],
        [null, null],
        ['D', 10],
        [15, 10]
      ], hybridSchema = [{
        name: 'Name'
      }, {
        name: 'Count',
        type: 'number'
      }], dataTable = new DataStore().createDataTable(hybridData, hybridSchema, 'table-1', { enableIndex: true, indexBy: 'Name' }),
      tableData = dataTable.getData().data,
      stringType = tableData.filter(x => typeof x[0] === 'string'),
      numberType = tableData.filter(x => typeof x[0] === 'number'),
      nullUndefType = tableData.filter(x => typeof x[0] === 'undefined' || x[0] === null);

    expect(stringType.length).toBe(hybridData.length - 2);
    expect(numberType.length).toBe(0);
    expect(nullUndefType.length).toBe(2);
  });

  it('Different datatable has different row id', () => {
    const newRowsMultiple = [
        ['ccm 3',
          30,
          5,
          305,
          135,
          3505,
          15,
          '1970-01-01',
          'USA'
        ],
        [
          'bs 320 3',
          20,
          10,
          355,
          160,
          3690,
          11,
          '1970-01-01',
          'USA'
        ]
      ],
      dataStore = new DataStore(),
      dataTable1 = dataStore.createDataTable(data5rows, schema, 'table-1'),
      dataTable2 = dataStore.createDataTable(newRowsMultiple, schema, 'table-2');
    let tableData;

    tableData = dataTable1.getData().data;
    expect(tableData[tableData.length - 1][dataTable1.indexOf(ROW_ID_COL_NAME)]).toBe(5);
    tableData = dataTable2.getData().data;
    expect(tableData[tableData.length - 1][dataTable1.indexOf(ROW_ID_COL_NAME)]).toBe(2);
  });

  it('Retruns DataTable object', () => {
    expect(table1.constructor).toBe(DataTable);
  });

  it('Adds data correctly', () => {
    expect(table1._data[0][0]).toBe('chevrolet chevelle malibu');
  });

  // table2 = validMultiTableDS.createDataTable(data5rows, schema, { enableIndex: true, indexBy: 'Acceleration' });
  it('Can add same data twice with different sorting', () => {
    expect(table1._data[0][0]).toBe('chevrolet chevelle malibu');
    expect(table2._data[0][0]).toBe('ford torino');
  });

  // table3 = validMultiTableDS.createDataTable(carsData, schema);
  // table4 = validMultiTableDS.createDataTable(carsData, schema, { enableIndex: false }, 'carsTable');

  it('Can add a data table without any sorting', () => {
    expect(table4._data[0][0]).toBe('chevrolet chevelle malibu');
  });

  it('Index the table properly', () => {
    expect(table3._data[0][8]).toBe('Europe');
    expect(table3._data[0][0]).toBe('citroen ds-21 pallas');
  });

  it('DataStore can have multiple data table', () => {
    expect(Object.keys(validMultiTableDS.dataTables).length).toBe(4);
  });

  it('DataStore generates the ids automatically and takes the correct id when provided', () => {
    expect(Object.keys(validMultiTableDS.dataTables)).toEqual(['table-1', 'table-2', 'table-3', 'carsTable']);
  });
});

describe('DataStore API - getDataTable', () => {
  let dataTable = validDataStore.getDataTable();
  it('Type of getDataTable - should be DataTable', () => {
    expect(dataTable).toBeInstanceOf(DataTable);
  });

  it('Default view data is same as the data provided in dataStore', () => {
    expect(dataTable._data[0][0]).toBe(data[0][0]);
  });
});

jest.useFakeTimers();
describe('DataStore API - on', () => {
  it('FDT_TC_031 - handler is bound to an event through on', () => {
    var fnRunFlag = false,
      dummyFn = () => {
        fnRunFlag = true;
      };

    validDataStore.on('FDT_TC_031', dummyFn);

    setTimeout(() => {
      validDataStore.trigger('FDT_TC_031');
    }, 200);

    jest.advanceTimersByTime(200);
    expect(fnRunFlag).toBe(true);
  });

  it('FDT_TC_031 - multiple handlers are bound to an event through on', () => {
    var fn1RunFlag = false, fn2RunFlag = false,
      dummyFn1 = () => {
        fn1RunFlag = true;
      },
      dummyFn2 = () => {
        fn2RunFlag = true;
      };

    validDataStore.on('FDT_TC_031', [dummyFn1, dummyFn2]);

    setTimeout(() => {
      validDataStore.trigger('FDT_TC_031');
    }, 200);

    jest.advanceTimersByTime(200);
    expect(fn1RunFlag).toBe(true);
    expect(fn2RunFlag).toBe(true);
  });

  it('FDT_TC_033 - multiple handlers bound to an event execute in order', () => {
    var arrFlag = [],
      dummyFn1 = () => {
        arrFlag.push('dummyFn1');
      },
      dummyFn2 = () => {
        arrFlag.push('dummyFn2');
      };

    validDataStore.on('FDT_TC_033', [dummyFn1, dummyFn2]);

    setTimeout(() => {
      validDataStore.trigger('FDT_TC_033');
    }, 200);

    jest.advanceTimersByTime(200);
    expect(arrFlag.length).toBe(2);
    expect(arrFlag).toEqual(['dummyFn1', 'dummyFn2']);
  });

  it('FDT_TC_034 - empty event name throws error', () => {
    var dummyFn = () => {
      return true;
    };

    expect(() => { validDataStore.on('', dummyFn); }).toThrow();
    expect(() => { validDataStore.on(dummyFn); }).toThrow();
  });

  it('FDT_TC_035 - empty handler throws error', () => {
    expect(() => { validDataStore.on('FDT_TC_035'); }).toThrow();
  });
});

describe('DataStore API - off', () => {
  it('FDT_TC_036 - only given handler is removed', () => {
    var fn1RunCount = 0, fn2RunCount = 0,
      dummyFn1 = () => {
        fn1RunCount++;
      },
      dummyFn2 = () => {
        fn2RunCount++;
      };

    validDataStore.on('FDT_TC_036', [dummyFn1, dummyFn2]);

    // trigger the event
    setTimeout(() => {
      validDataStore.trigger('FDT_TC_036');
    }, 200);

    jest.advanceTimersByTime(200);
    expect(fn1RunCount).toBe(1);
    expect(fn2RunCount).toBe(1);

    // remove a handler
    setTimeout(() => {
      validDataStore.off('FDT_TC_036', dummyFn1);
    }, 300);

    // trigger the event again
    setTimeout(() => {
      validDataStore.trigger('FDT_TC_036');
    }, 400);

    jest.advanceTimersByTime(400);
    expect(fn1RunCount).toBe(1);
    expect(fn2RunCount).toBe(2);
  });

  it('multiple handlers can be removed by providing an array', () => {
    var fn1RunCount = 0, fn2RunCount = 0,
      dummyFn1 = () => {
        fn1RunCount++;
      },
      dummyFn2 = () => {
        fn2RunCount++;
      };

    validDataStore.on('FDT_TC_031x', [dummyFn1, dummyFn2]);

    // trigger the event
    setTimeout(() => {
      validDataStore.trigger('FDT_TC_031x');
    }, 200);

    jest.advanceTimersByTime(200);
    expect(fn1RunCount).toBe(1);
    expect(fn2RunCount).toBe(1);

    // remove a handler
    setTimeout(() => {
      validDataStore.off('FDT_TC_031x', [dummyFn1, dummyFn2]);
    }, 300);

    // trigger the event again
    setTimeout(() => {
      validDataStore.trigger('FDT_TC_031x');
    }, 400);

    jest.advanceTimersByTime(400);
    expect(fn1RunCount).toBe(1);
    expect(fn2RunCount).toBe(1);
  });

  it('FDT_TC_038 - missing handler removes all from event', () => {
    var fn1RunCount = 0, fn2RunCount = 0,
      dummyFn1 = () => {
        fn1RunCount++;
      },
      dummyFn2 = () => {
        fn2RunCount++;
      };

    validDataStore.on('FDT_TC_038', [dummyFn1, dummyFn2]);

    // trigger the event
    setTimeout(() => {
      validDataStore.trigger('FDT_TC_038');
    }, 200);

    jest.advanceTimersByTime(200);
    expect(fn1RunCount).toBe(1);
    expect(fn2RunCount).toBe(1);

    // remove a handler
    setTimeout(() => {
      validDataStore.off('FDT_TC_038');
    }, 300);

    // trigger the event again
    setTimeout(() => {
      validDataStore.trigger('FDT_TC_038');
    }, 400);

    jest.advanceTimersByTime(400);
    expect(fn1RunCount).toBe(1);
    expect(fn2RunCount).toBe(1);
  });

  it('FDT_TC_034 - empty event name throws error', () => {
    var dummyFn = () => {
      return true;
    };

    expect(() => { validDataStore.off('', dummyFn); }).toThrow();
    expect(() => { validDataStore.off(dummyFn); }).toThrow();
  });
});

describe('DataStore API - trigger', () => {
  it('FDT_TC_040 - empty eventname throws error', () => {
    var dummyFn = () => {
      return true;
    };

    validDataStore.on('FDT_TC_031', dummyFn);

    expect(() => { validDataStore.trigger(''); }).toThrow();
    expect(() => { validDataStore.trigger([]); }).toThrow();
  });
});

describe('DataStore API - appendRows', () => {

  it('After appendRows the new row id should be consistent', () => {
    const newRowsSingle = [
        ['ccm 2',
          20,
          10,
          310,
          140,
          3510,
          20,
          '1970-01-01',
          'Germany'
        ]
      ],
      newRowsMultiple = [
        ['ccm 3',
          30,
          5,
          305,
          135,
          3505,
          15,
          '1970-01-01',
          'USA'
        ],
        [
          'bs 320 3',
          20,
          10,
          355,
          160,
          3690,
          11,
          '1970-01-01',
          'USA'
        ]
      ],
      dataStore = new DataStore(),
      dataTable = dataStore.createDataTable(data5rows, schema, 'table-1');
    let tableData;

    dataStore.appendRows(newRowsSingle, 'table-1');
    tableData = dataTable.getData().data;
    expect(tableData[tableData.length - 1][9]).toBe(6);
    dataStore.appendRows(newRowsMultiple, 'table-1');
    tableData = dataTable.getData().data;
    expect(tableData[tableData.length - 1][9]).toBe(8);
  });

  it('After appendRows in different datatable the new row id should be consistent in all datatables', () => {
    const newRowsSingle = [
        ['ccm 2',
          20,
          10,
          310,
          140,
          3510,
          20,
          '1970-01-01',
          'Germany'
        ]
      ],
      newRowsMultiple = [
        ['ccm 3',
          30,
          5,
          305,
          135,
          3505,
          15,
          '1970-01-01',
          'USA'
        ],
        [
          'bs 320 3',
          20,
          10,
          355,
          160,
          3690,
          11,
          '1970-01-01',
          'USA'
        ]
      ],
      dataStore = new DataStore(),
      dataTable1 = dataStore.createDataTable(data5rows, schema, 'table-1'),
      dataTable2 = dataStore.createDataTable(newRowsMultiple, schema, 'table-2');
    let tableData;

    dataStore.appendRows(newRowsSingle, 'table-1');
    tableData = dataTable1.getData().data;
    expect(tableData[tableData.length - 1][dataTable1.indexOf(ROW_ID_COL_NAME)]).toBe(6);
    dataStore.appendRows(newRowsMultiple, 'table-1');
    tableData = dataTable1.getData().data;
    expect(tableData[tableData.length - 1][dataTable1.indexOf(ROW_ID_COL_NAME)]).toBe(8);
    dataStore.appendRows(newRowsSingle, 'table-2');
    tableData = dataTable2.getData().data;
    expect(tableData[tableData.length - 1][dataTable2.indexOf(ROW_ID_COL_NAME)]).toBe(3);
  });


  it('FDT_TC_023 - single, multiple rows can be added', () => {
    let newRowsSingle = [
        ['ccm 2',
          20,
          10,
          310,
          140,
          3510,
          20,
          '1970-01-01',
          'Germany'
        ]
      ],
      newRowsMultiple = [
        ['ccm 3',
          30,
          5,
          305,
          135,
          3505,
          15,
          '1970-01-01',
          'USA'
        ],
        [
          'bs 320 3',
          20,
          10,
          355,
          160,
          3690,
          11,
          '1970-01-01',
          'USA'
        ]
      ], tableData, toMatchSingle = [newRowsSingle[0].slice(0)], toMatchMultiple = newRowsMultiple.map(arr => { return arr.slice(0); });

    toMatchSingle[0][7] = 0;
    toMatchSingle[0].push(6);
    toMatchMultiple[0][7] = 0;
    toMatchMultiple[1][7] = 0;
    toMatchMultiple[0].push(7);
    toMatchMultiple[1].push(8);

    validDataStore.appendRows(newRowsSingle);
    tableData = validDataStore.getDataTable().getData();

    expect(tableData.data.length).toEqual(6);
    expect(tableData.data[tableData.data.length - 1]).toEqual(toMatchSingle[0]);

    validDataStore.appendRows(newRowsMultiple);
    tableData = validDataStore.getDataTable().getData();

    expect(tableData.data[tableData.data.length - 2]).toEqual(toMatchMultiple[0]);
    expect(tableData.data[tableData.data.length - 1]).toEqual(toMatchMultiple[1]);
  });

  it('FDT_TC_025 - more elements in array', () => {
    let newRows = [
        ['ccm 3',
          20,
          10,
          310,
          140,
          3510,
          20,
          '1970-01-01',
          'Germany',
          'more 1',
          'more 2'
        ]
      ], tableData, toMatchSingle = [newRows[0].slice(0)];

    toMatchSingle[0][7] = 0;
    toMatchSingle[0].pop();
    toMatchSingle[0].pop();
    toMatchSingle[0].push(9);

    validDataStore.appendRows(newRows);
    tableData = validDataStore.getDataTable().getData();

    expect(tableData.data[tableData.data.length - 1]).toEqual(toMatchSingle[0]);
  });

  it('FDT_TC_026 - less elements in array', () => {
    let newRows = [
        ['ccm 3',
          20,
          10,
          310,
          140,
          3510,
          20
        ]
      ], tableData, toMatchSingle = [newRows[0].slice(0)];

    toMatchSingle[0][7] = UNDEF;
    toMatchSingle[0][8] = UNDEF;
    toMatchSingle[0].push(10);

    validDataStore.appendRows(newRows);
    tableData = validDataStore.getDataTable().getData();

    expect(tableData.data[tableData.data.length - 1]).toEqual(toMatchSingle[0]);
  });

  it('Append rows correctly inserts items in child data table', () => {
    const newRows = [
        ['ccm 3',
          12,
          10,
          310,
          140,
          3510,
          20,
          '1970-01-01',
          'Germany'
        ]
      ],
      dataStore = new DataStore(),
      dataTable = dataStore.createDataTable(data5rows, schema, 'table-1', { enableIndex: true, indexBy: 'Miles_per_Gallon' }),
      opsDt1 = dataTable.query([indexColBetween(1, 16, 17)]),
      opsDt2 = dataTable.query([indexColLess(1, 16)]);

    expect(dataTable.getData().data.length).toBe(5);
    expect(opsDt1.getData().data.length).toBe(2);
    expect(opsDt2.getData().data.length).toBe(1);

    dataStore.appendRows(newRows, 'table-1');

    expect(dataTable.getData().data.length).toBe(6);
    expect(opsDt1.getData().data.length).toBe(2);
    expect(opsDt2.getData().data.length).toBe(2);
  });

  it('FDT_TC_045 - _appendRows fires itemsAdded event', () => {
    var fnRunFlag = false,
      dummyFn = () => {
        fnRunFlag = true;
      },
      newRows = [
        ['ccm 3',
          20,
          10,
          310,
          140,
          3510,
          20,
          '1970-01-01',
          'Germany'
        ]
      ];

    validDataStore.on('itemsAdded', dummyFn);

    validDataStore.appendRows(newRows);

    expect(fnRunFlag).toBe(true);
  });

  describe('FDT_TC_047 - on method with itemsAdded event', () => {
    it('FDT_TC_031 - handler is bound to an event through on', () => {
      var fnRunFlag = false,
        dummyFn = () => {
          fnRunFlag = true;
        },
        newRows = [
          ['ccm 3',
            20,
            10,
            310,
            140,
            3510,
            20,
            '1970-01-01',
            'Germany'
          ]
        ];

      validDataStore.on('itemsAdded', dummyFn);

      validDataStore.appendRows(newRows);

      expect(fnRunFlag).toBe(true);
    });

    it('FDT_TC_031 - multiple handlers are bound to an event through on', () => {
      var fn1RunFlag = false, fn2RunFlag = false,
        dummyFn1 = () => {
          fn1RunFlag = true;
        },
        dummyFn2 = () => {
          fn2RunFlag = true;
        },
        newRows = [
          ['ccm 3',
            20,
            10,
            310,
            140,
            3510,
            20,
            '1970-01-01',
            'Germany'
          ]
        ];

      validDataStore.on('itemsAdded', [dummyFn1, dummyFn2]);

      validDataStore.appendRows(newRows);

      expect(fn1RunFlag).toBe(true);
      expect(fn2RunFlag).toBe(true);
    });

    it('FDT_TC_033 - multiple handlers bound to an event execute in order', () => {
      var arrFlag = [],
        dummyFn1 = () => {
          arrFlag.push('dummyFn1');
        },
        dummyFn2 = () => {
          arrFlag.push('dummyFn2');
        },
        newRows = [
          ['ccm 3',
            20,
            10,
            310,
            140,
            3510,
            20,
            '1970-01-01',
            'Germany'
          ]
        ];

      validDataStore.on('itemsAdded', [dummyFn1, dummyFn2]);

      validDataStore.appendRows(newRows);

      expect(arrFlag.length).toBe(2);
      expect(arrFlag).toEqual(['dummyFn1', 'dummyFn2']);
    });

    it('FDT_TC_034 - empty event name throws error', () => {
      var dummyFn = () => {
          return true;
        },
        newRows = [
          ['ccm 3',
            20,
            10,
            310,
            140,
            3510,
            20,
            '1970-01-01',
            'Germany'
          ]
        ];

      expect(() => { validDataStore.on('', dummyFn); }).toThrow();
      expect(() => { validDataStore.on(dummyFn); }).toThrow();

      validDataStore.appendRows(newRows);
    });

    it('FDT_TC_035 - empty handler throws error', () => {
      expect(() => { validDataStore.on('itemsAdded'); }).toThrow();
    });
  });

  describe('FDT_TC_048 - off method with itemsAdded event', () => {
    it('FDT_TC_036 - only given handler is removed', () => {
      var fn1RunCount = 0, fn2RunCount = 0,
        dummyFn1 = () => {
          fn1RunCount++;
        },
        dummyFn2 = () => {
          fn2RunCount++;
        },
        newRows = [
          ['ccm 3',
            20,
            10,
            310,
            140,
            3510,
            20,
            '1970-01-01',
            'Germany'
          ]
        ];

      validDataStore.on('itemsAdded', [dummyFn1, dummyFn2]);

      validDataStore.appendRows(newRows);

      expect(fn1RunCount).toBe(1);
      expect(fn2RunCount).toBe(1);

      // remove a handler
      validDataStore.off('itemsAdded', dummyFn1);

      validDataStore.appendRows(newRows);

      expect(fn1RunCount).toBe(1);
      expect(fn2RunCount).toBe(2);
    });

    it('multiple handlers can be removed by providing an array', () => {
      var fn1RunCount = 0, fn2RunCount = 0,
        dummyFn1 = () => {
          fn1RunCount++;
        },
        dummyFn2 = () => {
          fn2RunCount++;
        },
        newRows = [
          ['ccm 3',
            20,
            10,
            310,
            140,
            3510,
            20,
            '1970-01-01',
            'Germany'
          ]
        ];

      validDataStore.on('itemsAdded', [dummyFn1, dummyFn2]);

      validDataStore.appendRows(newRows);

      expect(fn1RunCount).toBe(1);
      expect(fn2RunCount).toBe(1);

      // remove a handler
      validDataStore.off('itemsAdded', [dummyFn1, dummyFn2]);

      validDataStore.appendRows(newRows);

      expect(fn1RunCount).toBe(1);
      expect(fn2RunCount).toBe(1);
    });

    it('FDT_TC_038 - missing handler removes all from event', () => {
      var fn1RunCount = 0, fn2RunCount = 0,
        dummyFn1 = () => {
          fn1RunCount++;
        },
        dummyFn2 = () => {
          fn2RunCount++;
        },
        newRows = [
          ['ccm 3',
            20,
            10,
            310,
            140,
            3510,
            20,
            '1970-01-01',
            'Germany'
          ]
        ];

      validDataStore.on('itemsAdded', [dummyFn1, dummyFn2]);

      validDataStore.appendRows(newRows);

      expect(fn1RunCount).toBe(1);
      expect(fn2RunCount).toBe(1);

      // remove a handler
      validDataStore.off('itemsAdded');

      validDataStore.appendRows(newRows);

      expect(fn1RunCount).toBe(1);
      expect(fn2RunCount).toBe(1);
    });

    it('FDT_TC_034 - empty event name throws error', () => {
      var dummyFn = () => {
          return true;
        },
        newRows = [
          ['ccm 3',
            20,
            10,
            310,
            140,
            3510,
            20,
            '1970-01-01',
            'Germany'
          ]
        ];

      expect(() => { validDataStore.off('', dummyFn); }).toThrow();
      expect(() => { validDataStore.off(dummyFn); }).toThrow();

      validDataStore.appendRows(newRows);
    });
  });

  it('FDT_TC_045 - _appendRows fires itemsAdded event', () => {
    var fnRunFlag = false,
      newRows = [
        ['ccm 3',
          20,
          10,
          310,
          140,
          3510,
          20,
          '1970-01-01',
          'Germany'
        ]
      ],
      dummyFn = (eventObj) => {
        fnRunFlag = eventObj.data.rows === newRows;
      };

    validDataStore.on('itemsAdded', dummyFn);

    validDataStore.appendRows(newRows);

    expect(fnRunFlag).toBe(true);
  });
});

describe('DataStore API - dispose', () => {
  it('FDT_TC_042, FDT_TC_043 - datastore references and the datastore are removed', () => {
    validDataStore = new DataStore(data, schema);
    expect(validDataStore).toBeDefined();
    expect(validDataStore.dataTables).toBeDefined();
    expect(validDataStore._defaultDataTable).toBeDefined();

    validDataStore.dispose();
    // all references should be undefined
    expect(validDataStore.dataTables).toBeUndefined();
    expect(validDataStore._defaultDataTable).toBeUndefined();
    expect(validDataStore).toEqual({});
  });
  it('datatable is removed', () => {
    let DT;

    validDataStore = new DataStore(data, schema);
    DT = validDataStore.getDataTable();
    expect(DT).toBeDefined();

    validDataStore.dispose();
    expect(DT).toEqual({ disposed: true });
  });
  it('disposed event is triggered', () => {
    var fnRunFlag = false,
      dummyFn = () => {
        fnRunFlag = true;
      };

    validDataStore = new DataStore(data, schema);
    validDataStore.on('disposed', dummyFn);

    validDataStore.dispose();

    expect(fnRunFlag).toBe(true);
  });

  describe('FDT_TC_052 - on method with disposed event', () => {
    it('FDT_TC_031 - handler is bound to an event through on', () => {
      var fnRunFlag = false,
        dummyFn = () => {
          fnRunFlag = true;
        };

      validDataStore = new DataStore(data, schema);
      validDataStore.on('disposed', dummyFn);

      validDataStore.dispose();

      expect(fnRunFlag).toBe(true);
    });

    it('FDT_TC_031 - multiple handlers are bound to an event through on', () => {
      var fn1RunFlag = false, fn2RunFlag = false,
        dummyFn1 = () => {
          fn1RunFlag = true;
        },
        dummyFn2 = () => {
          fn2RunFlag = true;
        };

      validDataStore = new DataStore(data, schema);
      validDataStore.on('disposed', [dummyFn1, dummyFn2]);

      validDataStore.dispose();

      expect(fn1RunFlag).toBe(true);
      expect(fn2RunFlag).toBe(true);
    });

    it('FDT_TC_033 - multiple handlers bound to an event execute in order', () => {
      var arrFlag = [],
        dummyFn1 = () => {
          arrFlag.push('dummyFn1');
        },
        dummyFn2 = () => {
          arrFlag.push('dummyFn2');
        };

      validDataStore = new DataStore(data, schema);
      validDataStore.on('disposed', [dummyFn1, dummyFn2]);

      validDataStore.dispose();

      expect(arrFlag.length).toBe(2);
      expect(arrFlag).toEqual(['dummyFn1', 'dummyFn2']);
    });

    it('FDT_TC_034 - empty event name throws error', () => {
      var dummyFn = () => {
        return true;
      };

      validDataStore = new DataStore(data, schema);

      expect(() => { validDataStore.on('', dummyFn); }).toThrow();
      expect(() => { validDataStore.on(dummyFn); }).toThrow();

      validDataStore.dispose();
    });

    it('FDT_TC_035 - empty handler throws error', () => {
      validDataStore = new DataStore(data, schema);
      expect(() => { validDataStore.on('disposed'); }).toThrow();
    });
  });

  describe('FDT_TC_048 - off method with disposed event', () => {
    it('FDT_TC_036 - only given handler is removed', () => {
      var fn1RunCount = 0, fn2RunCount = 0,
        dummyFn1 = () => {
          fn1RunCount++;
        },
        dummyFn2 = () => {
          fn2RunCount++;
        };

      validDataStore.on('disposed', [dummyFn1, dummyFn2]);

      validDataStore.dispose();

      expect(fn1RunCount).toBe(1);
      expect(fn2RunCount).toBe(1);

      // remove a handler
      validDataStore.off('disposed', dummyFn1);

      validDataStore.dispose();

      expect(fn1RunCount).toBe(1);
      expect(fn2RunCount).toBe(2);
    });

    it('multiple handlers can be removed by providing an array', () => {
      var fn1RunCount = 0, fn2RunCount = 0,
        dummyFn1 = () => {
          fn1RunCount++;
        },
        dummyFn2 = () => {
          fn2RunCount++;
        };

      validDataStore.on('disposed', [dummyFn1, dummyFn2]);

      validDataStore.dispose();

      expect(fn1RunCount).toBe(1);
      expect(fn2RunCount).toBe(1);

      // remove a handler
      validDataStore.off('disposed', [dummyFn1, dummyFn2]);

      validDataStore.dispose();

      expect(fn1RunCount).toBe(1);
      expect(fn2RunCount).toBe(1);
    });

    it('FDT_TC_038 - missing handler removes all from event', () => {
      var fn1RunCount = 0, fn2RunCount = 0,
        dummyFn1 = () => {
          fn1RunCount++;
        },
        dummyFn2 = () => {
          fn2RunCount++;
        };

      validDataStore.on('disposed', [dummyFn1, dummyFn2]);

      validDataStore.dispose();

      expect(fn1RunCount).toBe(1);
      expect(fn2RunCount).toBe(1);

      // remove a handler
      validDataStore.off('disposed');

      validDataStore.dispose();

      expect(fn1RunCount).toBe(1);
      expect(fn2RunCount).toBe(1);
    });

    it('FDT_TC_034 - empty event name throws error', () => {
      var dummyFn = () => {
        return true;
      };

      expect(() => { validDataStore.off('', dummyFn); }).toThrow();
      expect(() => { validDataStore.off(dummyFn); }).toThrow();

      validDataStore.dispose();
    });
  });
});
